# Form implementation generated from reading ui file 'new.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets, QtWebEngineWidgets, QtWebEngineCore
from PyQt6.QtCore import QUrl, QCoreApplication
from time import sleep
from PyQt6.QtGui import QKeySequence, QShortcut
import PyQt6.QtGui as QtGui
import keyboard
import pynput.keyboard as kb
import sys
import multiprocessing
import time

show = multiprocessing.Value('b', False)




def on_press(show, key):
    if str(key) == "<187>":
        with show.get_lock():
            show.value = True

def on_press_mid(show, key):
    print(key)
    if kb.Listener.canonical(key) == kb.Key.alt_l and kb:
        with show.get_lock():
            show.value = True

def switch(show):
    with kb.Listener(on_press=lambda k: on_press(show, k)) as listener:
        listener.join()
        print("Listening")



    print("Switching")


def start_worker(show):
    p = multiprocessing.Process(target=switch, args=(show,))
    p.start()
    return p

def monitor_worker(show):
    p = start_worker(show)
    while True:
        if not p.is_alive():
            p = start_worker(show)
        time.sleep(0.2)

def on_text_input(text):
    print(text)

class KeyPressEvent(QtCore.QObject):
    def __init__(self, widget):
        super(KeyPressEvent, self).__init__(QtCore.QObject())
        self.widget = widget

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key.Key_Escape:
            print("Escape")
            self.close()

    def close(self):
        self.widget.showMinimized()

class MyLineEdit(QtWidgets.QLineEdit):
    def __init__(self, parent=None):
        super(MyLineEdit, self).__init__(parent)

    def setUrlWidget(self, widget):
        self.urlWidget = widget

    def _setUrl(self, url):
        self.urlWidget.load(QUrl("https://www.google.com/search?q=" + url.replace(" ", "+")))

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key.Key_Return or event.key() == QtCore.Qt.Key.Key_Enter:
            self._setUrl(self.text())
            self.urlWidget.show()
        super(MyLineEdit, self).keyPressEvent(event)

class Dialog(QtWidgets.QDialog):
    def __init__(self):
        super(Dialog, self).__init__()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.KeyPress = KeyPressEvent(self)

    def keyPressEvent(self, event):
        self.KeyPress.keyPressEvent(event)

class TextEditor(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.text_edit = QtWidgets.QTextEdit(self)
        self.open_button = QtWidgets.QPushButton('Open', self)
        self.save_button = QtWidgets.QPushButton('Save', self)

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.text_edit)
        self.layout.addWidget(self.open_button)
        self.layout.addWidget(self.save_button)

        self.open_button.clicked.connect(self.open_file)
        self.save_button.clicked.connect(self.save_file)

    def open_file(self):
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File', '', 'Text Files (*.txt);;All Files (*)')
        if file_name:
            with open(file_name, 'r') as file:
                self.text_edit.setText(file.read())

    def save_file(self):
        file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File', '', 'Text Files (*.txt);;All Files (*)')
        if file_name:
            with open(file_name, 'w') as file:
                file.write(self.text_edit.toPlainText())

class Search_Widget(QtWidgets.QWidget):
    def __init__(self, parent):
        super().__init__()
        self.Dialog = parent
        self.widget = QtWidgets.QWidget(parent=self.Dialog)
        screen = QtWidgets.QApplication.primaryScreen().availableGeometry()
        self.widget.setGeometry(QtCore.QRect(0, 0, screen.width(), screen.height()))
        self.widget.setObjectName("widget")
        self.lineEdit = MyLineEdit(parent=self.widget)
        self.lineEdit.setGeometry(
            QtCore.QRect(self.widget.width() // 3, self.widget.height() // 3 - self.widget.height() // 10,
                         self.widget.width() // 3, self.widget.height() // 10))
        self.lineEdit.setObjectName("lineEdit")
        profile = QtWebEngineCore.QWebEngineProfile.defaultProfile()
        page = QtWebEngineCore.QWebEnginePage(profile, parent=self.widget)
        self.webview = QtWebEngineWidgets.QWebEngineView(self.widget)



        android_user_agent = "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Mobile Safari/537.36"
        profile = QtWebEngineCore.QWebEngineProfile.defaultProfile()
        profile.setHttpUserAgent(android_user_agent)

        self.webview.setPage(page)
        self.webview.setGeometry(
            QtCore.QRect(self.widget.width() // 3, self.widget.height() // 3, self.widget.width() // 3,
                         self.widget.height() // 3))
        self.webview.load(QUrl("http://bing.com/"))
        self.webview.hide()
        # Dialog.setCentralWidget(self.webview)

        self.lineEdit.setUrlWidget(self.webview)


class Ui_Dialog(object):
    def setupUi(self, Dialog:QtWidgets.QDialog):
        self.show = False
        self.Dialog = Dialog
        screen = QtWidgets.QApplication.primaryScreen().availableGeometry()
        self.Dialog.setObjectName("Dialog")
        self.Dialog.resize(screen.width(), screen.height())

        self.Dialog.setStyleSheet("background: transparent;")
        # self.Dialog.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.Dialog.setWindowOpacity(0.5)  # Set the opacity to 50%

        self.retranslateUi(self.Dialog)
        QtCore.QMetaObject.connectSlotsByName(self.Dialog)


    def on_shortcut_activated(self):
        self.show = not self.show
        if self.show:
            self.Dialog.show()
            self.Dialog.showFullScreen()
            self.Dialog.setFocus()
            self.Dialog.activateWindow()
        else:
            self.Dialog.hide()


    def check_keyboard_queue(self, show):
        print(" I see " + str(show.value))
        if show.value:
            self.on_shortcut_activated()
            show.value = False

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)

    keyboard_process = multiprocessing.Process(target=monitor_worker, args=(show,))

    keyboard_process.start()

    # Start a timer to check the queue every 100 ms
    timer = QtCore.QTimer()
    timer.timeout.connect(lambda: ui.check_keyboard_queue(show))
    timer.start(100)

    sys.exit(app.exec())

